/*
 * Copyright 2017, TeamDev Ltd. All rights reserved.
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

syntax = "proto3";

package spine.examples.todolist;

option (type_url_prefix) = "type.spine.examples.todolist";
option java_package = "org.spine3.examples.todolist.c.failures";
option java_multiple_files = false;
option java_generate_equals_and_hash = true;

import "spine/annotations.proto";

import "todolist/identifiers.proto";
import "todolist/values.proto";

// Fire the failure when cannot update the task description.
// Failure fires when task state either DRAFT or COMPLETED.
message CannotUpdateTaskDescription {

    // Failed the description update.
    DescriptionUpdateFailed update_failed = 1;
}

// Fire the failure when cannot update the task description.
// Failure fires when task state either DRAFT or COMPLETED.
message CannotUpdateTaskPriority {

    // Failed the priority update.
    PriorityUpdateFailed update_failed = 1;
}

// Fire the failure when cannot update the task due date.
// failure fires when task state either DRAFT or COMPLETED.
message CannotUpdateTaskDueDate {

    // Failed the due date update.
    TaskDueDateUpdateFailed update_failed = 1;
}

// Fire the failure when cannot update the label details.
// Failure fires when the expected label details does not match the actual.
message CannotUpdateLabelDetails {

    // Failed the label details update.
    LabelDetailsUpdateFailed update_failed = 1;
}

// Fire the failure when cannot assign label to task.
// Failure fires when task state either DRAFT or COMPLETED.
message CannotAssignLabelToTask {

    // Failed the label assigning to the task.
    AssignLabelToTaskFailed assign_label_failed = 1;
}

// Fire the failure when cannot remove label from task.
// Failure fires when task state either DRAFT or COMPLETED.
message CannotRemoveLabelFromTask {

    // Failed the label removing from task.
    RemoveLabelFromTaskFailed remove_label_failed = 1;
}

// Fire the failure when cannot reopen task.
// Failure fires when task is not COMPLETED.
message CannotReopenTask {

    // Failed the task reopening.
    ReopenTaskFailed reopen_task_failed = 1;
}

// Fire the failure when cannot delete task.
// Failure fires when task either COMPLETED or DELETED.
message CannotDeleteTask {

    // Failed the task deletion.
    DeleteTaskFailed delete_task_failed = 1;
}

// Fire the failure when cannot restore deleted task.
// Failure fires when task is not DELETED.
message CannotRestoreDeletedTask {

    // Failed the task restoring.
    RestoreDeletedTaskFailed restore_task_failed = 1;
}

// Fire the failure when cannot complete task.
// Failure fires when task is not FINALIZED.
message CannotCompleteTask {

    // Failed the task completion.
    CompleteTaskFailed complete_task_failed = 1;
}

// Fire the failure when cannot create task draft.
// Failure fires when task already has state.
message CannotCreateDraft {

    // Failed the draft creation.
    CreateDraftFailed create_draft_failed = 1;
}

// Fire the failure when cannot finalize task draft.
// Failure fires when task is not DRAFT.
message CannotFinalizeDraft {

    // Failed the draft finalization.
    FinalizeDraftFailed finalize_draft_failed = 1;
}

// Fire the failure when cannot update task with inappropriate description.
// Failure fires when the task description contains less than three symbols.
message CannotUpdateTaskWithInappropriateDescription {

    // Failed the description update.
    DescriptionUpdateFailed update_failed = 1;
}

// Fire the failure when cannot create task with inapproprriate descriprion.
// Failure fires when the task description contains less the three symbols.
message CannotCreateTaskWithInappropriateDescription {

    // Failed the task creation.
    CreateBasicTaskFailed create_task_failed = 1;
}
