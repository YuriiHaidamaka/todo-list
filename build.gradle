/*
 * Copyright 2017, TeamDev Ltd. All rights reserved.
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

buildscript {
    ext {
        protobufGradlePluginVersion = '0.8.0'
        appEngineVersion = '1.9.42'
        spineRepository = 'http://maven.teamdev.com/repository/spine'
        spineSnapshotsRepository = 'http://maven.teamdev.com/repository/spine-snapshots'
        appEngineGradlePlugin = 'com.google.cloud.tools:appengine-gradle-plugin:+'
        spinePluginVersion = '0.6.6-SNAPSHOT'
        guavaVersion = '20.0'
        jUnitPlatformVersion = '1.0.0-M3'
        jUnitVersion = '5.0.0-M3'
    }

    repositories {
        jcenter()

        maven { url = spineRepository }
        maven { url = spineSnapshotsRepository }

        mavenCentral()
        mavenLocal()
    }

    dependencies {
        classpath group: 'com.google.guava', name: 'guava', version: guavaVersion
        classpath(group: 'com.google.protobuf', name: 'protobuf-gradle-plugin', version: protobufGradlePluginVersion) {
            // exclude an old Guava version
            exclude group: 'com.google.guava'
        }
        classpath appEngineGradlePlugin
        classpath 'org.akhikhl.gretty:gretty:+'
        classpath group: 'org.spine3.tools', name: 'protobuf-plugin', version: spinePluginVersion, changing: true
        classpath "org.junit.platform:junit-platform-gradle-plugin:${jUnitPlatformVersion}"
    }

    // The below suppressions `GroovyAssignabilityCheck` is a workaround for the IDEA bug.
    // See: https://youtrack.jetbrains.com/issue/IDEA-141744
    //noinspection GroovyAssignabilityCheck
    configurations.all {
        //noinspection GroovyAssignabilityCheck
        resolutionStrategy {
            // don't cache changing modules at all
            cacheChangingModulesFor 0, 'seconds'
        }
    }
}

plugins {
    id 'com.gradle.build-scan' version '1.0'
}

// Apply configure-less Gretty multiple web-app setup.
// Do not move this declaration into `allprojects`. It doesn't work for Gretty.
//
// To run the web farm use:
//     gradle farmRun
//
// For more information see: http://akhikhl.github.io/gretty-doc/Multiple-web-apps-configureless-setup.html
// To run only selected farms see: http://akhikhl.github.io/gretty-doc/Configuring-default-farm.html
apply plugin: 'org.akhikhl.gretty'

buildScan {
    licenseAgreementUrl = 'https://gradle.com/terms-of-service'
    licenseAgree = 'yes'
}

allprojects {
    apply plugin: 'java' /* The `java` plugin is required at this level for Gradle Protobuf plugin.
                            See https://github.com/google/protobuf-gradle-plugin#adding-the-plugin-to-your-project */
    apply plugin: 'jacoco'
    apply plugin: 'idea'

    group = 'org.spine3.examples.todolist'       // Generated output GroupId
    version = '0.6.5-SNAPSHOT'  // Version in generated output. This is the version of the code.
    // For the deployment version see `project.ext.getDeploymentVersion`.

    repositories {
        jcenter()
        maven {
            url 'https://maven-central.storage.googleapis.com'             // Google's mirror of Maven Central
            //   url 'https://oss.sonatype.org/content/repositories/snapshots' // SNAPSHOT Repository (if needed)
        }

        // If it's not found in JCenter, it must be our code.
        maven { url = spineRepository }
        maven { url = spineSnapshotsRepository }

        mavenLocal()
        mavenCentral()
    }
}

// Suppress building the root project.
rootProject.jar { onlyIf { false } }

final boolean isTravis = System.env.TRAVIS == 'true'

ext {
    protobufVersion = '3.0.0'
    protobufDependency = "com.google.protobuf:protoc:${protobufVersion}"
    gRpcVersion = '1.0.0'
    slf4jVersion = '1.7.21'
    servletApiVersion = '3.1.0'
    gcloudJavaVersion = '0.2.8'
    spineProtobufPluginId = 'org.spine3.tools.protobuf-plugin'

    // Take latest snapshot of Spine from the repo.
    // See: http://stackoverflow.com/questions/22372508/use-latest-snapshot-version-from-the-remote-repo
//    spineVersion = 'latest.integration'
    spineVersion = '0.8.9-SNAPSHOT'

}


subprojects {
    project.ext {
        sourcesRootDir = "${projectDir}/src"
        generatedRootDir = "${projectDir}/generated"

        generatedJavaDir = "${generatedRootDir}/main/java"
        generatedTestJavaDir = "${generatedRootDir}/test/java"

        generatedGrpcDir = "${generatedRootDir}/main/grpc"
        generatedTestGrpcDir = "${generatedRootDir}/test/grpc"

        generatedSpineDir = "${generatedRootDir}/main/spine"

        testArtifactsPlugin = "${rootDir}/scripts/test-artifacts.gradle"
        generateDescriptorSetPlugin = "${rootDir}/scripts/generate-descriptor-set.gradle"
        gRpcPlugin = "${rootDir}/scripts/grpc.gradle"
    }

    apply plugin: 'java' /* The `java` plugin is required at this level for Gradle Protobuf plugin.
                            See https://github.com/google/protobuf-gradle-plugin#adding-the-plugin-to-your-project */
    apply plugin: 'com.google.protobuf'
    apply plugin: 'org.junit.platform.gradle.plugin'

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    dependencies {
        compile group: 'org.slf4j', name: 'slf4j-api', version: slf4jVersion
        compile group: 'org.slf4j', name: 'slf4j-jdk14', version: slf4jVersion
        compile group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.0'

        compile group: 'com.google.guava', name: 'guava', version: guavaVersion
        compile group: 'com.google.code.gson', name: 'gson', version: '2.7'

        compile("com.google.protobuf:protobuf-java:${protobufVersion}") {
            // Do not use Guava v18, we use newer version.
            exclude group: 'com.google.guava'
            // Use Gson v2.7 instead of v2.3. See: https://github.com/google/gson/blob/master/CHANGELOG.md
            exclude group: 'com.google.code.gson'
        }
        compile group: 'com.google.protobuf', name: 'protobuf-java-util', version: protobufVersion

        compile group: 'org.spine3', name: 'spine-client-core', version: spineVersion
        compile group: 'org.spine3', name: 'spine-server-core', version: spineVersion
        compile group: 'org.spine3', name: 'spine-users', version: spineVersion
        compile group: 'org.spine3', name: 'spine-values', version: spineVersion

        testCompile("org.spine3:spine-testutil-core:${spineVersion}") {
            // We are using JUnit 5.x instead of 4.x dependency of Spine testing framework.
            exclude group: 'junit'
        }
        testCompile "org.junit.jupiter:junit-jupiter-api:${jUnitVersion}"
        testRuntime "org.junit.jupiter:junit-jupiter-engine:${jUnitVersion}"
    }

    configurations.all {
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    }
    
    sourceSets {
        main {
            proto.srcDirs = ["${sourcesRootDir}/main/proto"]
            java.srcDirs = [generatedJavaDir, generatedSpineDir, "${sourcesRootDir}/main/java"]
            resources.srcDirs = ["${generatedRootDir}/main/resources"]
        }
        test {
            proto.srcDirs = ["${sourcesRootDir}/test/proto"]
            java.srcDirs = [generatedTestJavaDir, "${sourcesRootDir}/test/java"]
            resources.srcDirs = ["${generatedRootDir}/test/resources"]
        }
    }

    protobuf {
        protoc {
            // The version of protoc must match protobuf-java. If you don't depend on
            // protobuf-java directly, you will be transitively depending on the
            // protobuf-java version that grpc depends on.
            artifact = protobufDependency
        }

        // The below suppression `GroovyAssignabilityCheck` is a workaround for the IDEA bug.
        // See: https://youtrack.jetbrains.com/issue/IDEA-141744
        //noinspection GroovyAssignabilityCheck
        plugins {
            grpc {
                //noinspection GroovyAssignabilityCheck
                artifact = "io.grpc:protoc-gen-grpc-java:${gRpcVersion}"
            }
        }

        generatedFilesBaseDir = generatedRootDir

        generateProtoTasks {
            all()*.plugins {
                grpc {}
            }
        }
    }

    junitPlatform {
        platformVersion "${jUnitPlatformVersion}"

        logManager 'java.util.logging.LogManager'

        selectors {
            directory '${sourceRootDir}/test/java'
            aPackage 'org.spine3.examples.todolist'
        }

        filters {
            includeClassNamePatterns '.*Test'
        }
    }

    idea {
        module {
            sourceDirs += file(generatedJavaDir);
            sourceDirs += file(generatedGrpcDir);
            sourceDirs += file(generatedSpineDir);

            testSourceDirs += file(generatedTestJavaDir)
            testSourceDirs += file(generatedTestGrpcDir)
        }
    }

    idea.module.iml {
        beforeMerged { module ->
            module.dependencies.clear()
        }
        whenMerged { module ->
            module.dependencies*.exported = true
        }
    }

    // This is a workaround to make JUnit 5 work with Jacoco library.
    // There is an open issue here:
    // <link>https://discuss.gradle.org/t/jacocotestreport-task-fails-if-jacoco-plugin-is-applied-in-afterevaluate/835</link>
    // todo:13-12-16:illia.shepilov: revisit the workaround once the issue is resolved.
    project.afterEvaluate {
        def junitPlatformTestTask = project.tasks.getByName('junitPlatformTest')

        // configure jacoco to analyze the junitPlatformTest task
        jacoco {
            // this tool version is known to be compatible with JUnit 5.
            toolVersion = "0.7.6.201602180812"
            applyTo junitPlatformTestTask
        }

        codeCoverageReport.dependsOn {
            subprojects*.test
        }
    }

}

idea.project.ipr {
    beforeMerged { final project ->
        project.modulePaths.clear()
    }
    withXml { final provider ->
        provider.node.component
                .find { it.@name == 'VcsDirectoryMappings' }
                .mapping.@vcs = 'Git'
    }
}

task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled = true
        xml.destination = "${buildDir}/reports/jacoco/report.xml"
        html.enabled = false
        csv.enabled = false
    }
}

codeCoverageReport.dependsOn {
    subprojects*.test
}

// This Travis configuration is copied from Protobuf Gradle Plugin build.
// See: https://github.com/google/protobuf-gradle-plugin/blob/master/build.gradle
if (isTravis) {
    // To limit the memory usage when running in Travis.
    // Travis tend to kill tasks that use too much memory.
    allprojects {
        tasks.withType(GroovyCompile) {
            groovyOptions.fork = false
        }
        tasks.withType(Test) {
            // containers (currently) have 2 dedicated cores and 4GB of memory
            maxParallelForks = 2
            minHeapSize = '128m'
        }
    }
    // Travis kills the test if it has seen no output for 10 minutes, so we need to produce output.
    test {
        testLogging {
            showStandardStreams = true
        }
    }
}
